name: JetBrains Devops task

on:
  push:
    branches:
      - 'feature/**'
      - 'dev/**'
      - 'dev-*'
  pull_request:
    types: [ closed ]
    branches:
      - 'stage'
  workflow_dispatch: {}

permissions: #This gives the repo’s GITHUB_TOKEN the rights to push to GHCR from Actions.
  contents: write
  packages: write

env:
  IMAGE_REPO: ghcr.io/dshmelev/jetbrain-task
  STAGE_NS: staging
  PROD_NS: production

jobs:
  build:
   if: github.event_name != 'workflow_dispatch' # skip build on prod deploy
   runs-on: ubuntu-latest
   outputs:
     safe_branch: ${{ steps.branch.outputs.safe_branch }}
   steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Compute safe branch
       id: branch
       run: |
         BRANCH="${GITHUB_REF_NAME}"
         SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' \
                       | sed 's#[/_]#-#g' | sed 's#[^a-z0-9-]##g')
         echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

     - name: Set up QEMU (for cross-platform builds)
       uses: docker/setup-qemu-action@v2

     - name: Set up Docker Buildx   #allows multi-platform builds, caching, and advanced Docker features.
       uses: docker/setup-buildx-action@v3

     - name: Login to GHCR
       uses: docker/login-action@v2
       with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

     - name: Build and push (dev)
       if: (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/dev/') || startsWith(github.ref, 'refs/heads/dev-'))
       uses: docker/build-push-action@v4
       with:
         context: .
         file: ./Dockerfile
         push: true
         platforms: linux/amd64
         tags: |
           ${{ env.IMAGE_REPO }}:dev-${{ steps.branch.outputs.safe_branch }}-${{ github.sha }}          

     - name: Build and push (stage)
       if: github.ref == 'refs/heads/stage'
       uses: docker/build-push-action@v4
       with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
#################################################### Dev ############################################################################################

  deploy-dev:
       needs: build
       if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/dev/') || startsWith(github.ref, 'refs/heads/dev-')
       runs-on: ubuntu-latest
       env:
         IMAGE_TAG: dev-${{ needs.build.outputs.safe_branch }}-${{ github.sha }}
         NAMESPACE: dev-${{ needs.build.outputs.safe_branch }}
       steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Dev with Helm (dynamic)
           run: |
             echo "Deploying ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ns $NAMESPACE"
             
             helm upgrade --install my-app ./charts \
               --namespace "$NAMESPACE" \
               --create-namespace \
               --set image.tag=${IMAGE_TAG} \
               -f charts/values-dev.yaml
############################################### Stage #################################################################################################

  deploy-staging:
     needs: build
     if: github.ref == 'refs/heads/stage'
     runs-on: ubuntu-latest
     env:
      IMAGE_TAG: ${{ github.sha }}
      NAMESPACE: staging
     steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
             chmod 600 ~/.kube/config
             
         - name: Trivy scan (staging image)
           uses: aquasecurity/trivy-action@0.29.0
           with:
             image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
             format: 'table'
             ignore-unfixed: true
             vuln-type: 'os,library'
             severity: 'CRITICAL,HIGH'
             cache: 'true'
             output: trivy.txt

         - name: Publish Trivy summary
           run: |
             if [[ -s trivy.txt ]]; then
               {
                 echo "### Trivy scan for ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
                 echo '```'
                 cat trivy.txt
                 echo '```'
               } >> $GITHUB_STEP_SUMMARY
             fi

         - name: Deploy to Staging
           run: |
            echo "Deploying image: ${{ env.IMAGE_REPO }} ${{ env.IMAGE_TAG }} to  ns ${{ env.STAGE_NS }}"

            helm upgrade --install my-app ./charts \
            --atomic --wait --timeout 3m0s \
            --namespace ${{ env.STAGE_NS}} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            -f charts/values-stage.yaml
             
         - name: Update image tag in values-prod.yaml
           run: |
              sed -i "s|tag:.*|tag: \"${{ env.IMAGE_TAG }}\"|" charts/values-prod.yaml
              git config user.name "github-actions"
              git config user.email "github-actions@github.com"
              git add charts/values-prod.yaml
              git commit -m "Update prod image tag to ${{ env.IMAGE_TAG }}"
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
              git push    

         - name: View last staging tag
           id: set-tag
           run: |
              echo "tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
              
              {
                echo "### ✅ Staging Deployment Tag"
                echo ""
                echo "**Image Tag:** ${{ env.IMAGE_REPO }}:  ${{ env.IMAGE_TAG }}"
              } >> $GITHUB_STEP_SUMMARY
################################################# Production ###############################################################################################

  deploy-production:
     if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
     runs-on: ubuntu-latest
     permissions:
      issues: write
     concurrency: production  # Prevent multiple prod deploys at same time
     steps:
       - name: Await Manual Approval
         uses: trstringer/manual-approval@v1
         with:
           secret: ${{ secrets.GITHUB_TOKEN }}
           approvers: dshmelev
           minimum-approvals: 1
           issue-title: "Manual Approval Required for Production deploy"
           issue-body: "Please approve or deny the deployment."

       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Login to GHCR (for verify)
         uses: docker/login-action@v2
         with:
           registry: ghcr.io
           username: ${{ github.actor }}
           password: ${{ secrets.GITHUB_TOKEN }}

       - name: Read last staging tag
         id: read-tag
         run: |
           TAG=$(grep 'tag:' charts/values-prod.yaml | head -n1 | awk '{print $2}')
           echo "staging_tag=$TAG" >> $GITHUB_OUTPUT    

       - name: Verify the staging image exists (no rebuild)
         run: |
           IMAGE=${{ env.IMAGE_REPO }}:${{ steps.read-tag.outputs.staging_tag }}
           echo "Checking $IMAGE"
           if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
             echo "Image exists."
           else
             echo "ERROR: $IMAGE not found. Production must reuse staging image."
             exit 1 
           fi

       - name: Set up Kubeconfig
         run: |
           mkdir -p ~/.kube
           echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
           chmod 600 ~/.kube/config

       - name: Deploy to Production with Helm
         run: |
           echo "Deploying image: ${{ env.IMAGE_REPO }}:${{ steps.read-tag.outputs.staging_tag }} to ${{ env.PROD_NS }}"
           
           helm upgrade --install my-app ./charts \
             --atomic  --wait --timeout 5m0s \
             --namespace=production  \
             -f charts/values-prod.yaml \
           
       - name: Write to job summary
         run: |
            echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** ${{ env.IMAGE_REPO }}:${{ steps.read-tag.outputs.staging_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Helm Status" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            helm status my-app --namespace ${{ env.PROD_NS }} >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY